{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import cm\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CountNeighbours(M, grid, nneigh):\n",
    "    count = 0\n",
    "    for i in range(grid):\n",
    "        for j in range(grid):\n",
    "            #counts the number of neighbours of each cell\n",
    "            for x in range(i-1, i+2): #horizontal neigbours\n",
    "                for y in range(j-1, j+2): #vertical neighbours\n",
    "                    if x>=0 and y>=0 and x<=grid-1 and y<= grid-1: #only considers cells within margins\n",
    "                        if x==i and y==j:\n",
    "                            pass\n",
    "                        else:\n",
    "                            count = count + M[x,y] #add 1 if state of cell is alive\n",
    "                            #print(x, y, count)\n",
    "            nneigh[i,j] = count\n",
    "    return nneigh       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "def UpdateGrid(M, grid, nneigh):\n",
    "    for i in range(grid):\n",
    "        for j in range(grid):\n",
    "            if M[i,j] == 1:\n",
    "                if nneigh[i,j] <2 or nneigh[i,j]>3:\n",
    "                    M[i,j]=0\n",
    "            else:\n",
    "                if nneigh[i,j] == 3:\n",
    "                     M[i,j]=1\n",
    "    return M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "def life(grid, ngen, pause_time):\n",
    "    #Initialize agent and number of neighbours\n",
    "    M = np.random.randint(0, 2, (grid,grid))\n",
    "    nneigh = np.zeros((grid,grid))\n",
    "    \n",
    "    #Number of active cells in each generation\n",
    "    activity = np.zeros(ngen)\n",
    "    \n",
    "    #Plot the initial agent matrix\n",
    "    plot = plt.imshow(M, cmap='Greys')\n",
    "    \n",
    "    #Loop over number of generations\n",
    "    for g in range(ngen):\n",
    "        nneigh = CountNeighbours(M, grid, nneigh)\n",
    "        M = UpdateGrid(M, grid, nneigh)\n",
    "        activity[g] = sum(sum(M)) #number of active cells, updates in each generation\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD6CAYAAABnLjEDAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAR8klEQVR4nO3dUahl1X3H8e+vo9ZAGtQ4yjAjHQtSDKFV5iIWSwkmUmsk+pBCpJQpDMxLCoakxEkLpYFCTR+iL23CEKVTCNFEA4qklMEqIRDUe9VYzZCMEdsMDs6IlcSXtJP8+3C2cud47ux91llr7X2zfh8Y5p5zz97rP+fe/+yz1l7rvxQRmNmvv98YOwAzq8PJbtYIJ7tZI5zsZo1wsps1wslu1oiVkl3SzZJ+JOllSYdyBWVm+Sn1PrukHcCPgZuAE8AzwB0R8cOtjrn00ktj79697z7e2Nh4z2v27dt31uNFr8lxTN85Fpk/75Bj+s6RKiXeWnK9L33nSTkmRa3fwUXnWdarr77KG2+8oUXfWyXZ/wD4u4j44+7xFwAi4h+2OmZtbS3W19c3n+M9r5mPZ9FrchzTd45F5s+b8t6lxLZISry15Hpf+s6TckyKWr+Di86zrLW1NdbX1xc2vsrH+N3ATzc9PtE9Z2YTtEqyL/rf4z3/LUk6KGld0vrp06dXaM7MVnHeCseeAK7Y9HgP8Nr8iyLiMHAYZh/j577X28iQj0c5PmalnGOREl2IUh/9c/2b5+V6D1LOk6OrlUPq70qpLiisdmV/BrhK0pWSLgA+BTy6wvnMrKDkK3tEnJH0l8C/AzuA+yPipWyRmVlWq3yMJyK+A3wnUyxmVpBn0Jk1Ivk+e1Jj0tKNlbr/nWNwqtQ8gSGG/Jv7XpPrPnWO939KxwyR8t7OSxmUHPhzzn6f3cy2ESe7WSOc7GaNWGk0voQcE0xqTeooNd4xpJ+ZY0JSrbGNXHLNP5+XY2wjZQxliJzvra/sZo1wsps1wslu1oiqffZ9+/bRt569T8r95EVKLZ6ZP6bUffcc713KffZSa9Vz3fPP8TMbs25ByfEPX9nNGuFkN2uEk92sEU52s0ZMbiFMqeKRJRaFlFpIMuScpQaRckxqqlUMs9TElVrnyLWQxwthzOwsTnazRjjZzRox6kKYXH2uIefIMTZRq2BErc0dckxagXoLPMbqjw8xlaq25+Iru1kjnOxmjXCymzXCyW7WiFEH6EoNVuWa1JEy6JKyaixHpdJS1VRy/JtLVVrN9TOsVYW3r93UYzbHsra2tuWxvrKbNcLJbtYIJ7tZIyZXXXZKk1LGqppaS63FP7n+fWP1k2st7BnS1irbPPvKbtYIJ7tZI5zsZo3YdgthUhdilNjBo9RCnhS5FrXkOCZX4YYc9++HnLOvAm2OWFPPu2w7vs9uZk52s1Y42c0a0Zvsku6XdErSi5ueu0TSUUnHu78vLhumma2qt7qspD8C3gb+NSI+3D33j8CbEXG3pEPAxRFxV29jA6rLzss1YabEFj+L1JoUVGqCyZSqy04plmXbGWugFlaoLhsR3wXenHv6NuBI9/UR4PaVojOz4lJvvV0eEScBIuKkpMu2eqGkg8DBxHbMLJPi99kj4jBwGNI+xptZHqnJ/rqkXd1VfRdwashB81s2D5Grb72d+tI1t0Uecp5znXPIMbn6rzkmQi1Sa+eflFhy9v1Tb709Cuzvvt4PPJInHDMrZcitt28A3wd+V9IJSQeAu4GbJB0Hbuoem9mE9X6Mj4g7tvjWRzPHYmYFVV0Is7GxcVYfpNSuIIvOm6OtHH3gMXcKqdXPTDlmSFGGHP3ZUoU5S1n2vfVCGDNzspu1wslu1ggnu1kjqg7QDZlUU2p3lBRj7e4yxPx5Sy0+qbUdc4oxBxxr7baTcyKXr+xmjXCymzXCyW7WiMntCLPd+3vzak3QyLVTS45JQKV2Vy3V5y1R9TXXzrtDeEcYMzuLk92sEU52s0ZMrs/e139K7WeWKLCQsuCmVCGEXPf8xyryWOt9qdVPrn0P/R1eCGNmTnazVjjZzRrhZDdrxKgDdKUGZWpVii012FOq8m2Oyi6lKt8OPa6GHFs214zdk2rM7CxOdrNGONnNGjH56rK5Ci6U6EOlxJ/rmByvyVWdNUWpqrslKgCXGg8p8fvvSTVm5mQ3a4WT3awRoxacHLP/V6svl3LPvFQhhFL9/JIFF1Ztp8Q5Us8zZPFPjna24iu7WSOc7GaNcLKbNcLJbtaIURfCpFSUSa3OmuO8OQbkag4Q1RpsW7bd1HZKVeHtU6oicK7fuaF8ZTdrhJPdrBG9yS7pCklPSDom6SVJd3bPXyLpqKTj3d8Xlw/XzFIN6bOfAT4XEc9K+i1gQ9JR4C+AxyPibkmHgEPAXcs0XmohRqnzllpwk2M8IVe/uE+pvnauAhE5quMOkaOwyeR2hImIkxHxbPf1z4FjwG7gNuBI97IjwO1LR2lm1SzVZ5e0F7gWeAq4PCJOwuw/BOCy3MGZWT6Dk13S+4GHgc9ExM+WOO6gpHVJ66dPn06J0cwyGJTsks5nluhfj4hvd0+/LmlX9/1dwKlFx0bE4YhYi4i1nTt35ojZzBL0DtBp1vu/DzgWEV/e9K1Hgf3A3d3fj/Sda75STYrUQacSk2pqVdopVS031wBeiYo4Ke0MOWaRlPe/7xw1Da1UM2Q0/gbgz4H/lPR899xfM0vyb0o6APw38KepwZpZeb3JHhHfA7b6r+2jecMxs1I8g86sEduuUk2pSRFjxtJnSttUD5EjtkVS+sU5jslVBWiIkouXfGU3a4ST3awRTnazRqjm/UFJZzVWs3hFn1qx1Ny9tMSiilK/L7kWteRYCJNjPCf19zTTLsALG/KV3awRTnazRjjZzRrhZDdrxKiTahYpNQCUY7HJvFLH5JjUkarEopDUiSBjTlpa9phSi2dyVif2ld2sEU52s0Y42c0aMeqOMIuU2kElR+GDsYo/5JJjgUquIh9T+jn3yVX5dl6JqrvnKl7hK7tZI5zsZo1wsps1YtQ+e66CEZkWDyx93lxFHqdUOKNE8ctc99lz9J1rLfya4s/ZV3azRjjZzRrhZDdrhJPdrBGTq1Sz4JgisdT6d4+1i0mqklsGn6udWguRhij1M5tXYrLR2toa6+vrrlRj1jInu1kjnOxmjdh2k2qGKLWoIsVYCzEWKbUQpk/lcaGVzzHWLjKLeFKNmS3NyW7WCCe7WSMmV7yi1L3VHLtj5ig2kFJwcsh5Su2UmlJIMZcchTRK3Hcfct5cO8Ise4yLV5iZk92sFU52s0b0JrukCyU9LekHkl6S9MXu+SslPSXpuKQHJV1QPlwzSzVkgO4XwI0R8bak84HvSfo34LPAPRHxgKSvAgeArxSMdUs5Bj5yTVxJkTIQVWrgKaWdHBVYUgbbSu2Uk2PANFXJyjq9V/aYebt7eH73J4AbgYe6548At2eLysyyG9Rnl7RD0vPAKeAo8BPgrYg4073kBLB7i2MPSlqXdO5N3sysqEHJHhG/jIhrgD3AdcDVi162xbGHI2ItIra+AWhmxS01qSYi3pL0JHA9cJGk87qr+x7gtb7j53dxXdTPmdJOISUmkExpkU5KOzXHLUqMs6QsPinVTqlCJlsZMhq/U9JF3dfvAz4GHAOeAD7ZvWw/8MigFs1sFEOu7LuAI5J2MPvP4ZsR8ZikHwIPSPp74DngvoJxmtmKepM9Il4Arl3w/CvM+u9mtg14Bp1ZI6quetvY2Fh6YGnM7X9LrMDLVYW01HF98dVYubXMcX3H5Jggk6uKba2qRVvxld2sEU52s0Y42c0a8WtZqaZUXzpHBZlSYw65+rw52hmzanCJST+lfmY5J8wM4Su7WSOc7GaNcLKbNWJyffYcFUVztLNVWyVi6TtH6oKJHAtJUu45l4p/iBILnnL9m8f6PX2Hr+xmjXCymzXCyW7WCCe7WSMmN0DXJ9dATg6lBqtytLNIjsGqUttHp8g1earWgqFSE2+G8pXdrBFOdrNGONnNGlG1zz6kumytiRSllNjFZMyKtKX6+bm2pc5hrAVDtc/rK7tZI5zsZo1wsps1YvL32WsVQsjVn00p5FDq35hjUdGQfnOpgiNDztP3mlJFHkvtMNv3mr5j1ta23mXNV3azRjjZzRrhZDdrhJPdrBGj7giTMkGg9ja3yyo18Dcvx84sJQaIxlbr/S+xnfSi8+TkK7tZI5zsZo1wsps1YvKTakrtyFqqGmiJ3T1z7YKaI7aau72kTFxJaaev3SHnGbMoiRfCmNlZnOxmjRic7JJ2SHpO0mPd4yslPSXpuKQHJV1QLkwzW9UyffY7gWPAB7rHXwLuiYgHJH0VOAB8JXN82fpPJe9fnkutIg2ldq5NbTvHMTl25ClV/LLEeELqcVkXwkjaA3wc+Fr3WMCNwEPdS44Aty8dpZlVM/Rj/L3A54FfdY8/CLwVEWe6xyeA3YsOlHRQ0rqk9UXfN7M6epNd0q3AqYjY2Pz0gpcu/LwUEYcjYi0itv58YWbFDemz3wB8QtItwIXM+uz3AhdJOq+7uu8BXisXppmtSssMBkn6CPBXEXGrpG8BD28aoHshIv75XMevra3FstVlay1qKbW7SKnJO33tLpJjEkqOBTjbTa5B1hzv3cBByYUNrXKf/S7gs5JeZtaHv2+Fc5lZYUtNl42IJ4Enu69fAa7LH5KZleAZdGaNGHUhTM2dTnIUG0jsP/Wed16pPm/JRRbnOiZ1PGGsxUu1dphd9BoXrzCzlTnZzRrhZDdrxOSKV0ylz5XaTonii1PaEbTU/fyU89Qq/pDycy51n73vGO8IY2ZOdrNWONnNGuFkN2vE5Abo5uWq1lqqskifsarQpMoxwDWl2HK0s0ipLZtTYhnKV3azRjjZzRrhZDdrxKh99lyLH4act0+ufn6OvtwQtfqrOWKrtWAoVY4iJSXazc1XdrNGONnNGuFkN2uEk92sEUtVl125MemsxqY02JbSdqlVY8uec6hSW1GNVbU2JZZcP7Mck7QKnjd7dVkz20ac7GaNcLKbNaLqpJp9+/axeUeYIXL1GcdehHCudseaSFRqm+da/fFaC26GvGbMXW9cqcbMzuJkN2uEk92sEZMvXpFiSF90rJ1fh5xnSv3BHP3tUn3rXOMHpRb7lLBKO76ymzXCyW7WCCe7WSOc7GaNqDpAt7GxsfRgU81tnXO0nbKootbWxLUqyExpktOYW07PS5msk5Ov7GaNcLKbNcLJbtaI2sUrTgP/BVwKvFGt4dVsp1hhe8W7nWKF7RHvb0fEzkXfqJrs7zYqrUfE1stzJmQ7xQrbK97tFCtsv3jn+WO8WSOc7GaNGCvZD4/UbortFCtsr3i3U6yw/eI9yyh9djOrzx/jzRpRNdkl3SzpR5JelnSoZttDSLpf0ilJL2567hJJRyUd7/6+eMwY3yHpCklPSDom6SVJd3bPTzXeCyU9LekHXbxf7J6/UtJTXbwPSrpg7FjfIWmHpOckPdY9nmysQ1RLdkk7gH8C/gT4EHCHpA/Van+gfwFunnvuEPB4RFwFPN49noIzwOci4mrgeuDT3fs51Xh/AdwYEb8PXAPcLOl64EvAPV28/wMcGDHGeXcCxzY9nnKsvWpe2a8DXo6IVyLif4EHgNsqtt8rIr4LvDn39G3Ake7rI8DtVYPaQkScjIhnu69/zuyXcjfTjTci4u3u4fndnwBuBB7qnp9MvJL2AB8HvtY9FhONdaiayb4b+Ommxye656bu8og4CbMEAy4bOZ73kLQXuBZ4ignH230sfh44BRwFfgK8FRFnupdM6XfiXuDzwK+6xx9kurEOUjPZF60B9K2AFUl6P/Aw8JmI+NnY8ZxLRPwyIq4B9jD7pHf1opfVjeq9JN0KnIqIjc1PL3jp6LEuo+Z69hPAFZse7wFeq9h+qtcl7YqIk5J2MbsqTYKk85kl+tcj4tvd05ON9x0R8ZakJ5mNNVwk6bzuijmV34kbgE9IugW4EPgAsyv9FGMdrOaV/Rngqm5E8wLgU8CjFdtP9Siwv/t6P/DIiLG8q+tD3gcci4gvb/rWVOPdKemi7uv3AR9jNs7wBPDJ7mWTiDcivhAReyJiL7Pf0/+IiD9jgrEuJSKq/QFuAX7MrK/2NzXbHhjfN4CTwP8x+yRygFlf7XHgePf3JWPH2cX6h8w+Rr4APN/9uWXC8f4e8FwX74vA33bP/w7wNPAy8C3gN8eOdS7ujwCPbYdY+/54Bp1ZIzyDzqwRTnazRjjZzRrhZDdrhJPdrBFOdrNGONnNGuFkN2vE/wNKt8X7CJoz2AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "life(50, 50, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
